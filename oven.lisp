;; oven.lisp 07/06/20

(defun item (list)
  (first list))
(defun temp (list)
  (parse-integer (second list)))
(defun cooking-time (list)
  (parse-integer (third list)))
(defun sum-all-temps (list)
  (sum (mapcar #'temp list)))
(defun desired-temp (list)
  (my-round (/ (sum-all-temps list) (length list)) 0.5))
(defun adjust-time (item desired-temp)
  (my-ceil (/ (* (temp item)
				 (cooking-time item))
			  desired-temp)))

(defun get-list ()
  (let ((my-list nil)
        (in ""))
	(format t "Enter items as ITEM TEMPERATURE TIME~%")
    (my-while (string-ne "x" (input in "Item"))
      (push (ppcre:split " " in) my-list))
    (reverse my-list)))

(defun oven ()
  (let ((my-list (get-list))
		(desired-temp 0)
		(total-time 0)
		(items nil)
		(sorted nil))
    (dolist (item my-list)
      (format t "~%~{~a ~}" item))
;	(print my-list)
	(format t "~%~%Total temperature : ~a" (sum-all-temps my-list))
	(format t "~%Desired temp : ~d" (desired-temp my-list))
	(setf desired-temp (desired-temp my-list))
	(dolist (item my-list)
	  (let ((adjusted-time (adjust-time item desired-temp)))
		(format t "~%Adjusted temp for ~a : ~a mins" (item item) adjusted-time)
		(push (list (item item) adjusted-time) items)))
	(setf sorted (sort items #'> :key #'second))))


(defun get-next-item-time (list)
  (cadadr list))

(defun find-next (list)
  (let ((max (cadar list)))
	(labels ((inner (list)
			   (cond ((null list) t)
					 (t (print (car list))
						(if (null (cdr list))
							(push (get-next-item-time list) (car list))
							(push (- max (get-next-item-time list)) (car list)))
						
						(print (car list))
						(inner (rest list))))))
	  (inner list))))

