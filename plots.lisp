(defvar x)
(defvar y)
(defvar data)
(setf data '((1 2)
			 (2 4)
			 (3 8)
			 (4 16)
			 (5 4)
			 (6 1)))

(defun get-data (x)
  (second (assoc x data)))

(defun first-plot ()
  (setf x (vgplot:range 1 7))
  (setf y (map 'vector #'get-data x))
  (vgplot:xlabel "[Data]")
  (vgplot:ylabel '"[Stuff]")
  (vgplot:plot x y))

(defun test-func (x)
  (home-win (gethash (get-expect-key x) *expects-db*)))

(defun test-func2 (x)
  (first (get-expect-percents (gethash (get-expect-key x) *expects-db*))))

(defun expect-plot ()
  (setf x (vgplot:range -3 3 0.5))
  (setf y (map 'vector #'test-func x))
  (vgplot:plot x y)
  (vgplot:xlabel "[ Expects ]")
  (vgplot:ylabel "[ Home Wins ]"))

(defmacro make-expect-plot (fn x)
  `(funcall ,fn (gethash (get-expect-key ,x) *expects-db*)))
(defun home-win-plot (x)
  (make-expect-plot #'home-win x))
(defun draw-plot (x)
  (make-expect-plot #'draw x))
(defun away-win-plot (x)
  (make-expect-plot #'away-win x))

(defmacro make-expect-percents-plot (x)
  `(funcall ,fn (get-expect-percents (gethash (get-expect-key ,x) *expects-db*))))
(defun home-percents-plot (x)
  (make-expect-percents-plot #'first x))
(defun draw-expects-plot (x)
  (make-expect-percents-plot #'second x))
(defun away-percents-plot (x)
  (make-expect-percents-plot #'third x))

