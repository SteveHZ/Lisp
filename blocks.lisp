(defvar database
  (setf database '((b1 shape brick)
                   (b1 colour green)
                   (b1 size small)
                   (b1 supported-by b2)
                   (b1 supported-by b3)
                   (b2 shape brick)
                   (b2 colour red)
                   (b2 size small)
                   (b2 supports b1)
                   (b2 left-of b3)
                   (b3 shape brick)
                   (b3 color red)
                   (b3 size small)
                   (b3 supports b1)
                   (b3 right-of b2)
                   (b4 shape pyramid)
                   (b4 colour blue)
                   (b4 size large)
                   (b4 supported-by b5)
                   (b5 shape cube)
                   (b5 colour green)
                   (b5 size large)
                   (b5 supports b4)
                   (b6 shape brick)
                   (b6 colour purple)
                   (b6 size large))))

(defun match-element (e1 e2)
  (or (equal e1 e2)
      (equal e2 '?)))

(defun match-triple (x y)
  (every #'match-element x y))

(defun fetch (pattern)
  (remove-if-not
     #'(lambda (x) (match-triple x pattern))
     database))

(defun colour-pattern (block)
  (list block 'colour '?))

(defun supporters (block)
  (mapcar #'first
          (fetch (list '? 'supports block))))
